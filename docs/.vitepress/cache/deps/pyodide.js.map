{
  "version": 3,
  "sources": ["../../../../node_modules/src/js/vendor/stackframe/stackframe.ts", "../../../../node_modules/src/js/vendor/stackframe/error-stack-parser.ts", "../../../../node_modules/src/js/environments.ts", "../../../../node_modules/src/js/compat.ts", "../../../../node_modules/src/js/nativefs.ts", "../../../../node_modules/src/core/sentinel.ts", "../../../../node_modules/src/js/emscripten-settings.ts", "../../../../node_modules/src/js/version.ts", "../../../../node_modules/src/js/pyodide.ts"],
  "sourcesContent": ["// @ts-nocheck\n// Port of https://github.com/stacktracejs/stackframe/blob/master/stackframe.js.\n// Rewritten to ES6 and removed UMD and CommonJS support.\n\nfunction _isNumber(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n}\n\nfunction _capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.substring(1);\n}\n\nfunction _getter(p) {\n  return function () {\n    return this[p];\n  };\n}\n\nvar booleanProps = [\"isConstructor\", \"isEval\", \"isNative\", \"isToplevel\"];\nvar numericProps = [\"columnNumber\", \"lineNumber\"];\nvar stringProps = [\"fileName\", \"functionName\", \"source\"];\nvar arrayProps = [\"args\"];\nvar objectProps = [\"evalOrigin\"];\n\nvar props = booleanProps.concat(\n  numericProps,\n  stringProps,\n  arrayProps,\n  objectProps,\n);\n\ndeclare namespace StackFrame {\n  export interface StackFrameOptions {\n    isConstructor?: boolean;\n    isEval?: boolean;\n    isNative?: boolean;\n    isToplevel?: boolean;\n    columnNumber?: number;\n    lineNumber?: number;\n    fileName?: string;\n    functionName?: string;\n    source?: string;\n    args?: any[];\n    evalOrigin?: StackFrame;\n  }\n}\n\ndeclare class StackFrame {\n  constructor(obj: StackFrame.StackFrameOptions);\n\n  args?: any[];\n  getArgs(): any[] | undefined;\n  setArgs(args: any[]): void;\n\n  evalOrigin?: StackFrame;\n  getEvalOrigin(): StackFrame | undefined;\n  setEvalOrigin(stackframe: StackFrame): void;\n\n  isConstructor?: boolean;\n  getIsConstructor(): boolean | undefined;\n  setIsConstructor(isConstructor: boolean): void;\n\n  isEval?: boolean;\n  getIsEval(): boolean | undefined;\n  setIsEval(isEval: boolean): void;\n\n  isNative?: boolean;\n  getIsNative(): boolean | undefined;\n  setIsNative(isNative: boolean): void;\n\n  isToplevel?: boolean;\n  getIsToplevel(): boolean | undefined;\n  setIsToplevel(isToplevel: boolean): void;\n\n  columnNumber?: number;\n  getColumnNumber(): number | undefined;\n  setColumnNumber(columnNumber: number): void;\n\n  lineNumber?: number;\n  getLineNumber(): number | undefined;\n  setLineNumber(lineNumber: number): void;\n\n  fileName?: string;\n  getFileName(): string | undefined;\n  setFileName(fileName: string): void;\n\n  functionName?: string;\n  getFunctionName(): string | undefined;\n  setFunctionName(functionName: string): void;\n\n  source?: string;\n  getSource(): string | undefined;\n  setSource(source: string): void;\n\n  toString(): string;\n}\n\nfunction StackFrame(obj) {\n  if (!obj) return;\n  for (var i = 0; i < props.length; i++) {\n    if (obj[props[i]] !== undefined) {\n      this[\"set\" + _capitalize(props[i])](obj[props[i]]);\n    }\n  }\n}\n\nStackFrame.prototype = {\n  getArgs: function () {\n    return this.args;\n  },\n  setArgs: function (v) {\n    if (Object.prototype.toString.call(v) !== \"[object Array]\") {\n      throw new TypeError(\"Args must be an Array\");\n    }\n    this.args = v;\n  },\n\n  getEvalOrigin: function () {\n    return this.evalOrigin;\n  },\n  setEvalOrigin: function (v) {\n    if (v instanceof StackFrame) {\n      this.evalOrigin = v;\n    } else if (v instanceof Object) {\n      this.evalOrigin = new StackFrame(v);\n    } else {\n      throw new TypeError(\"Eval Origin must be an Object or StackFrame\");\n    }\n  },\n\n  toString: function () {\n    var fileName = this.getFileName() || \"\";\n    var lineNumber = this.getLineNumber() || \"\";\n    var columnNumber = this.getColumnNumber() || \"\";\n    var functionName = this.getFunctionName() || \"\";\n    if (this.getIsEval()) {\n      if (fileName) {\n        return (\n          \"[eval] (\" + fileName + \":\" + lineNumber + \":\" + columnNumber + \")\"\n        );\n      }\n      return \"[eval]:\" + lineNumber + \":\" + columnNumber;\n    }\n    if (functionName) {\n      return (\n        functionName +\n        \" (\" +\n        fileName +\n        \":\" +\n        lineNumber +\n        \":\" +\n        columnNumber +\n        \")\"\n      );\n    }\n    return fileName + \":\" + lineNumber + \":\" + columnNumber;\n  },\n};\n\nStackFrame.fromString = function StackFrame$$fromString(str) {\n  var argsStartIndex = str.indexOf(\"(\");\n  var argsEndIndex = str.lastIndexOf(\")\");\n\n  var functionName = str.substring(0, argsStartIndex);\n  var args = str.substring(argsStartIndex + 1, argsEndIndex).split(\",\");\n  var locationString = str.substring(argsEndIndex + 1);\n\n  if (locationString.indexOf(\"@\") === 0) {\n    var parts = /@(.+?)(?::(\\d+))?(?::(\\d+))?$/.exec(locationString, \"\");\n    var fileName = parts[1];\n    var lineNumber = parts[2];\n    var columnNumber = parts[3];\n  }\n\n  return new StackFrame({\n    functionName: functionName,\n    args: args || undefined,\n    fileName: fileName,\n    lineNumber: lineNumber || undefined,\n    columnNumber: columnNumber || undefined,\n  });\n};\n\nfor (var i = 0; i < booleanProps.length; i++) {\n  StackFrame.prototype[\"get\" + _capitalize(booleanProps[i])] = _getter(\n    booleanProps[i],\n  );\n  StackFrame.prototype[\"set\" + _capitalize(booleanProps[i])] = (function (p) {\n    return function (v) {\n      this[p] = Boolean(v);\n    };\n  })(booleanProps[i]);\n}\n\nfor (var j = 0; j < numericProps.length; j++) {\n  StackFrame.prototype[\"get\" + _capitalize(numericProps[j])] = _getter(\n    numericProps[j],\n  );\n  StackFrame.prototype[\"set\" + _capitalize(numericProps[j])] = (function (p) {\n    return function (v) {\n      if (!_isNumber(v)) {\n        throw new TypeError(p + \" must be a Number\");\n      }\n      this[p] = Number(v);\n    };\n  })(numericProps[j]);\n}\n\nfor (var k = 0; k < stringProps.length; k++) {\n  StackFrame.prototype[\"get\" + _capitalize(stringProps[k])] = _getter(\n    stringProps[k],\n  );\n  StackFrame.prototype[\"set\" + _capitalize(stringProps[k])] = (function (p) {\n    return function (v) {\n      this[p] = String(v);\n    };\n  })(stringProps[k]);\n}\n\nexport default StackFrame;\n", "// @ts-nocheck\n// Port of https://github.com/stacktracejs/error-stack-parser\n// Rewritten to ES6 and removed UMD and CommonJS support.\n// Removed old opera support.\n\nimport StackFrame from \"./stackframe\";\n\ndeclare namespace ErrorStackParser {\n  export type { StackFrame };\n  /**\n   * Given an Error object, extract the most information from it.\n   *\n   * @param {Error} error object\n   * @return {Array} of StackFrames\n   */\n  export function parse(error: Error): StackFrame[];\n}\n\nfunction ErrorStackParser() {\n  var CHROME_IE_STACK_REGEXP = /^\\s*at .*(\\S+:\\d+|\\(native\\))/m;\n  var SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\\[native code])?$/;\n\n  return {\n    /**\n     * Given an Error object, extract the most information from it.\n     *\n     * @param {Error} error object\n     * @return {Array} of StackFrames\n     */\n    parse: function ErrorStackParser$$parse(error: Error): StackFrame[] {\n      if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {\n        return this.parseV8OrIE(error);\n      } else if (error.stack) {\n        return this.parseFFOrSafari(error);\n      } else {\n        throw new Error(\"Cannot parse given Error object\");\n      }\n    },\n\n    // Separate line and column numbers from a string of the form: (URI:Line:Column)\n    extractLocation: function ErrorStackParser$$extractLocation(urlLike) {\n      // Fail-fast but return locations like \"(native)\"\n      if (urlLike.indexOf(\":\") === -1) {\n        return [urlLike];\n      }\n\n      var regExp = /(.+?)(?::(\\d+))?(?::(\\d+))?$/;\n      var parts = regExp.exec(urlLike.replace(/[()]/g, \"\"));\n      return [parts[1], parts[2] || undefined, parts[3] || undefined];\n    },\n\n    parseV8OrIE: function ErrorStackParser$$parseV8OrIE(error) {\n      var filtered = error.stack.split(\"\\n\").filter(function (line) {\n        return !!line.match(CHROME_IE_STACK_REGEXP);\n      }, this);\n\n      return filtered.map(function (line) {\n        if (line.indexOf(\"(eval \") > -1) {\n          // Throw away eval information until we implement stacktrace.js/stackframe#8\n          line = line\n            .replace(/eval code/g, \"eval\")\n            .replace(/(\\(eval at [^()]*)|(,.*$)/g, \"\");\n        }\n        var sanitizedLine = line\n          .replace(/^\\s+/, \"\")\n          .replace(/\\(eval code/g, \"(\")\n          .replace(/^.*?\\s+/, \"\");\n\n        // capture and preserve the parenthesized location \"(/foo/my bar.js:12:87)\" in\n        // case it has spaces in it, as the string is split on \\s+ later on\n        var location = sanitizedLine.match(/ (\\(.+\\)$)/);\n\n        // remove the parenthesized location from the line, if it was matched\n        sanitizedLine = location\n          ? sanitizedLine.replace(location[0], \"\")\n          : sanitizedLine;\n\n        // if a location was matched, pass it to extractLocation() otherwise pass all sanitizedLine\n        // because this line doesn't have function name\n        var locationParts = this.extractLocation(\n          location ? location[1] : sanitizedLine,\n        );\n        var functionName = (location && sanitizedLine) || undefined;\n        var fileName =\n          [\"eval\", \"<anonymous>\"].indexOf(locationParts[0]) > -1\n            ? undefined\n            : locationParts[0];\n\n        return new StackFrame({\n          functionName: functionName,\n          fileName: fileName,\n          lineNumber: locationParts[1],\n          columnNumber: locationParts[2],\n          source: line,\n        });\n      }, this);\n    },\n\n    parseFFOrSafari: function ErrorStackParser$$parseFFOrSafari(error) {\n      var filtered = error.stack.split(\"\\n\").filter(function (line) {\n        return !line.match(SAFARI_NATIVE_CODE_REGEXP);\n      }, this);\n\n      return filtered.map(function (line) {\n        // Throw away eval information until we implement stacktrace.js/stackframe#8\n        if (line.indexOf(\" > eval\") > -1) {\n          line = line.replace(\n            / line (\\d+)(?: > eval line \\d+)* > eval:\\d+:\\d+/g,\n            \":$1\",\n          );\n        }\n\n        if (line.indexOf(\"@\") === -1 && line.indexOf(\":\") === -1) {\n          // Safari eval frames only have function names and nothing else\n          return new StackFrame({\n            functionName: line,\n          });\n        } else {\n          var functionNameRegex = /((.*\".+\"[^@]*)?[^@]*)(?:@)/;\n          var matches = line.match(functionNameRegex);\n          var functionName = matches && matches[1] ? matches[1] : undefined;\n          var locationParts = this.extractLocation(\n            line.replace(functionNameRegex, \"\"),\n          );\n\n          return new StackFrame({\n            functionName: functionName,\n            fileName: locationParts[0],\n            lineNumber: locationParts[1],\n            columnNumber: locationParts[2],\n            source: line,\n          });\n        }\n      }, this);\n    },\n  };\n}\n\nconst errorStackParser = new ErrorStackParser();\n\nexport { StackFrame };\nexport default errorStackParser;\n", "// @ts-nocheck\n\n/** @private */\nexport const IN_NODE =\n  typeof process === \"object\" &&\n  typeof process.versions === \"object\" &&\n  typeof process.versions.node === \"string\" &&\n  !process.browser; /* This last condition checks if we run the browser shim of process */\n\n/** @private */\nexport const IN_NODE_COMMONJS =\n  IN_NODE &&\n  typeof module !== \"undefined\" &&\n  typeof module.exports !== \"undefined\" &&\n  typeof require !== \"undefined\" &&\n  typeof __dirname !== \"undefined\";\n\n/** @private */\nexport const IN_NODE_ESM = IN_NODE && !IN_NODE_COMMONJS;\n\n/** @private */\nexport const IN_BUN = typeof globalThis.Bun !== \"undefined\";\n\n/** @private */\nexport const IN_DENO = typeof Deno !== \"undefined\"; // just in case...\n\n/** @private */\nexport const IN_BROWSER = !IN_NODE && !IN_DENO;\n\n/** @private */\nexport const IN_BROWSER_MAIN_THREAD =\n  IN_BROWSER &&\n  typeof window === \"object\" &&\n  typeof document === \"object\" &&\n  typeof document.createElement === \"function\" &&\n  \"sessionStorage\" in window &&\n  typeof importScripts !== \"function\";\n\n/** @private */\nexport const IN_BROWSER_WEB_WORKER =\n  IN_BROWSER && typeof importScripts === \"function\" && typeof self === \"object\";\n\n/** @private */\nexport const IN_SAFARI =\n  typeof navigator === \"object\" &&\n  typeof navigator.userAgent === \"string\" &&\n  navigator.userAgent.indexOf(\"Chrome\") == -1 &&\n  navigator.userAgent.indexOf(\"Safari\") > -1;\n\nexport const IN_SHELL = typeof read == \"function\" && typeof load === \"function\";\n\n/**\n * Detects the current environment and returns a record with the results.\n * This function is useful for debugging and testing purposes.\n * @private\n */\nexport function detectEnvironment(): Record<string, boolean> {\n  return {\n    IN_NODE,\n    IN_NODE_COMMONJS,\n    IN_NODE_ESM,\n    IN_BUN,\n    IN_DENO,\n    IN_BROWSER,\n    IN_BROWSER_MAIN_THREAD,\n    IN_BROWSER_WEB_WORKER,\n    IN_SAFARI,\n    IN_SHELL,\n  };\n}\n", "import ErrorStackParser from \"./vendor/stackframe/error-stack-parser\";\nimport {\n  IN_NODE,\n  IN_NODE_ESM,\n  IN_BROWSER_MAIN_THREAD,\n  IN_BROWSER_WEB_WORKER,\n  IN_NODE_COMMONJS,\n  IN_SHELL,\n} from \"./environments\";\nimport { Lockfile } from \"./types\";\n\nlet nodeUrlMod: typeof import(\"node:url\");\nlet nodePath: typeof import(\"node:path\");\nlet nodeVmMod: typeof import(\"node:vm\");\n/** @private */\nexport let nodeFSMod: typeof import(\"node:fs\");\n/** @private */\nexport let nodeFsPromisesMod: typeof import(\"node:fs/promises\");\n\ndeclare function load(a: string): Promise<void>;\ndeclare function read(a: string): string;\ndeclare function readbuffer(a: string): ArrayBuffer;\n\ndeclare var globalThis: {\n  importScripts: (url: string) => void;\n  document?: typeof document;\n  fetch?: typeof fetch;\n};\n\n/**\n * If we're in node, it's most convenient to import various node modules on\n * initialization. Otherwise, this does nothing.\n * @private\n */\nexport async function initNodeModules() {\n  if (!IN_NODE) {\n    return;\n  }\n  // @ts-ignore\n  nodeUrlMod = (await import(\"node:url\")).default;\n  nodeFSMod = await import(\"node:fs\");\n  nodeFsPromisesMod = await import(\"node:fs/promises\");\n\n  // @ts-ignore\n  nodeVmMod = (await import(\"node:vm\")).default;\n  nodePath = await import(\"node:path\");\n  pathSep = nodePath.sep;\n\n  // Emscripten uses `require`, so if it's missing (because we were imported as\n  // an ES6 module) we need to polyfill `require` with `import`. `import` is\n  // async and `require` is synchronous, so we import all packages that might be\n  // required up front and define require to look them up in this table.\n\n  if (typeof require !== \"undefined\") {\n    return;\n  }\n  // These are all the packages required in pyodide.asm.js. You can get this\n  // list with:\n  // $ grep -o 'require(\"[a-z]*\")' pyodide.asm.js  | sort -u\n  const fs = nodeFSMod;\n  const crypto = await import(\"node:crypto\");\n  const ws = await import(\"ws\");\n  const child_process = await import(\"node:child_process\");\n  const node_modules: { [mode: string]: any } = {\n    fs,\n    crypto,\n    ws,\n    child_process,\n  };\n  // Since we're in an ES6 module, this is only modifying the module namespace,\n  // it's still private to Pyodide.\n  (globalThis as any).require = function (mod: string): any {\n    return node_modules[mod];\n  };\n}\n\nfunction node_resolvePath(path: string, base?: string): string {\n  return nodePath.resolve(base || \".\", path);\n}\n\nfunction browser_resolvePath(path: string, base?: string): string {\n  if (base === undefined) {\n    // @ts-ignore\n    base = location;\n  }\n  return new URL(path, base).toString();\n}\n\nexport let resolvePath: (rest: string, base?: string) => string;\nif (IN_NODE) {\n  resolvePath = node_resolvePath;\n} else if (IN_SHELL) {\n  resolvePath = (x) => x;\n} else {\n  resolvePath = browser_resolvePath;\n}\n\n/**\n * Get the path separator. If we are on Linux or in the browser, it's /.\n * In Windows, it's \\.\n * @private\n */\nexport let pathSep: string;\n\nif (!IN_NODE) {\n  pathSep = \"/\";\n}\n\n/**\n * Load a binary file, only for use in Node. If the path explicitly is a URL,\n * then fetch from a URL, else load from the file system.\n * @param indexURL base path to resolve relative paths\n * @param path the path to load\n * @param checksum sha-256 checksum of the package\n * @returns An ArrayBuffer containing the binary data\n * @private\n */\nfunction node_getBinaryResponse(\n  path: string,\n  _file_sub_resource_hash?: string | undefined, // Ignoring sub resource hash. See issue-2431.\n):\n  | { response: Promise<Response>; binary?: undefined }\n  | { binary: Promise<Uint8Array> } {\n  if (path.startsWith(\"file://\")) {\n    // handle file:// with filesystem operations rather than with fetch.\n    path = path.slice(\"file://\".length);\n  }\n  if (path.includes(\"://\")) {\n    // If it has a protocol, make a fetch request\n    return { response: fetch(path) };\n  } else {\n    // Otherwise get it from the file system\n    return {\n      binary: nodeFsPromisesMod\n        .readFile(path)\n        .then(\n          (data: Buffer) =>\n            new Uint8Array(data.buffer, data.byteOffset, data.byteLength),\n        ),\n    };\n  }\n}\n\nfunction shell_getBinaryResponse(\n  path: string,\n  _file_sub_resource_hash?: string | undefined, // Ignoring sub resource hash. See issue-2431.\n):\n  | { response: Promise<Response>; binary?: undefined }\n  | { binary: Promise<Uint8Array> } {\n  if (path.startsWith(\"file://\")) {\n    // handle file:// with filesystem operations rather than with fetch.\n    path = path.slice(\"file://\".length);\n  }\n  if (path.includes(\"://\")) {\n    // If it has a protocol, make a fetch request\n    throw new Error(\"Shell cannot fetch urls\");\n  } else {\n    // Otherwise get it from the file system\n    return {\n      binary: Promise.resolve(new Uint8Array(readbuffer(path))),\n    };\n  }\n}\n\n/**\n * Load a binary file, only for use in browser. Resolves relative paths against\n * indexURL.\n *\n * @param path the path to load\n * @param subResourceHash the sub resource hash for fetch() integrity check\n * @returns A Uint8Array containing the binary data\n * @private\n */\nfunction browser_getBinaryResponse(\n  path: string,\n  subResourceHash: string | undefined,\n): { response: Promise<Response>; binary?: undefined } {\n  const url = new URL(path, location as unknown as URL);\n  let options = subResourceHash ? { integrity: subResourceHash } : {};\n  return { response: fetch(url, options) };\n}\n\n/** @private */\nexport let getBinaryResponse: (\n  path: string,\n  file_sub_resource_hash?: string | undefined,\n) =>\n  | { response: Promise<Response>; binary?: undefined }\n  | { response?: undefined; binary: Promise<Uint8Array> };\nif (IN_NODE) {\n  getBinaryResponse = node_getBinaryResponse;\n} else if (IN_SHELL) {\n  getBinaryResponse = shell_getBinaryResponse;\n} else {\n  getBinaryResponse = browser_getBinaryResponse;\n}\n\nexport async function loadBinaryFile(\n  path: string,\n  file_sub_resource_hash?: string | undefined,\n): Promise<Uint8Array> {\n  const { response, binary } = getBinaryResponse(path, file_sub_resource_hash);\n  if (binary) {\n    return binary;\n  }\n  const r = await response;\n  if (!r.ok) {\n    throw new Error(`Failed to load '${path}': request failed.`);\n  }\n  return new Uint8Array(await r.arrayBuffer());\n}\n\n/**\n * Currently loadScript is only used once to load `pyodide.asm.js`.\n * @param url\n * @private\n */\nexport let loadScript: (url: string) => Promise<void>;\n\nif (IN_BROWSER_MAIN_THREAD) {\n  // browser\n  loadScript = async (url) => await import(/* webpackIgnore: true */ url);\n} else if (IN_BROWSER_WEB_WORKER) {\n  // webworker\n  loadScript = async (url) => {\n    try {\n      // use importScripts in classic web worker\n      globalThis.importScripts(url);\n    } catch (e) {\n      // importScripts throws TypeError in a module type web worker, use import instead\n      if (e instanceof TypeError) {\n        await import(/* webpackIgnore: true */ url);\n      } else {\n        throw e;\n      }\n    }\n  };\n} else if (IN_NODE) {\n  loadScript = nodeLoadScript;\n} else if (IN_SHELL) {\n  loadScript = load;\n} else {\n  throw new Error(\"Cannot determine runtime environment\");\n}\n\n/**\n * Load a text file and executes it as Javascript\n * @param url The path to load. May be a url or a relative file system path.\n * @private\n */\nasync function nodeLoadScript(url: string) {\n  if (url.startsWith(\"file://\")) {\n    // handle file:// with filesystem operations rather than with fetch.\n    url = url.slice(\"file://\".length);\n  }\n  if (url.includes(\"://\")) {\n    // If it's a url, load it with fetch then eval it.\n    nodeVmMod.runInThisContext(await (await fetch(url)).text());\n  } else {\n    // Otherwise, hopefully it is a relative path we can load from the file\n    // system.\n    await import(/* webpackIgnore: true */ nodeUrlMod.pathToFileURL(url).href);\n  }\n}\n\nexport async function loadLockFile(lockFileURL: string): Promise<Lockfile> {\n  if (IN_NODE) {\n    await initNodeModules();\n    const package_string = await nodeFsPromisesMod.readFile(lockFileURL, {\n      encoding: \"utf8\",\n    });\n    return JSON.parse(package_string);\n  } else if (IN_SHELL) {\n    const package_string = read(lockFileURL);\n    return JSON.parse(package_string);\n  } else {\n    let response = await fetch(lockFileURL);\n    return await response.json();\n  }\n}\n\n/**\n * Calculate the directory name of the current module.\n * This is used to guess the indexURL when it is not provided.\n */\nexport async function calculateDirname(): Promise<string> {\n  if (IN_NODE_COMMONJS) {\n    return __dirname;\n  }\n\n  let err: Error;\n  try {\n    throw new Error();\n  } catch (e) {\n    err = e as Error;\n  }\n  let fileName = ErrorStackParser.parse(err)[0].fileName!;\n\n  if (IN_NODE && !fileName.startsWith(\"file://\")) {\n    fileName = `file://${fileName}`; // Error stack filenames are not starting with `file://` in `Bun`\n  }\n\n  if (IN_NODE_ESM) {\n    const nodePath = await import(\"node:path\");\n    const nodeUrl = await import(\"node:url\");\n\n    // FIXME: We would like to use import.meta.url here,\n    // but mocha seems to mess with compiling typescript files to ES6.\n    return nodeUrl.fileURLToPath(nodePath.dirname(fileName));\n  }\n\n  const indexOfLastSlash = fileName.lastIndexOf(pathSep);\n  if (indexOfLastSlash === -1) {\n    throw new Error(\n      \"Could not extract indexURL path from pyodide module location\",\n    );\n  }\n  return fileName.slice(0, indexOfLastSlash);\n}\n\n/**\n * Ensure that the directory exists before trying to download files into it (Node.js only).\n * @param dir The directory to ensure exists\n */\nexport async function ensureDirNode(dir: string) {\n  if (!IN_NODE) {\n    return;\n  }\n\n  try {\n    // Check if the `installBaseUrl` directory exists\n    await nodeFsPromisesMod.stat(dir); // Use `.stat()` which works even on ASAR archives of Electron apps, while `.access` doesn't.\n  } catch {\n    // If it doesn't exist, make it. Call mkdir() here only when necessary after checking the existence to avoid an error on read-only file systems. See https://github.com/pyodide/pyodide/issues/4736\n    await nodeFsPromisesMod.mkdir(dir, {\n      recursive: true,\n    });\n  }\n}\n", "import { Module } from \"./types\";\n\n/**\n * @private\n */\nasync function syncfs(m: Module, direction: boolean): Promise<void> {\n  return new Promise((resolve, reject) => {\n    m.FS.syncfs(direction, (err: any) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n}\n\n/**\n * @private\n */\nexport async function syncLocalToRemote(m: Module): Promise<void> {\n  return await syncfs(m, false);\n}\n\n/**\n * @private\n */\nexport async function syncRemoteToLocal(m: Module): Promise<void> {\n  return await syncfs(m, true);\n}\n\n/**\n * @private\n */\nexport function initializeNativeFS(module: Module) {\n  const FS = module.FS;\n  const MEMFS = module.FS.filesystems.MEMFS;\n  const PATH = module.PATH;\n\n  const nativeFSAsync = {\n    // DIR_MODE: {{{ cDefine('S_IFDIR') }}} | 511 /* 0777 */,\n    // FILE_MODE: {{{ cDefine('S_IFREG') }}} | 511 /* 0777 */,\n    DIR_MODE: 16384 | 511,\n    FILE_MODE: 32768 | 511,\n    mount: function (mount: any) {\n      if (!mount.opts.fileSystemHandle) {\n        throw new Error(\"opts.fileSystemHandle is required\");\n      }\n\n      // reuse all of the core MEMFS functionality\n      return MEMFS.mount.apply(null, arguments);\n    },\n    syncfs: async (mount: any, populate: Boolean, callback: Function) => {\n      try {\n        const local = nativeFSAsync.getLocalSet(mount);\n        const remote = await nativeFSAsync.getRemoteSet(mount);\n        const src = populate ? remote : local;\n        const dst = populate ? local : remote;\n        await nativeFSAsync.reconcile(mount, src, dst);\n        callback(null);\n      } catch (e) {\n        callback(e);\n      }\n    },\n    // Returns file set of emscripten's filesystem at the mountpoint.\n    getLocalSet: (mount: any) => {\n      let entries = Object.create(null);\n\n      function isRealDir(p: string) {\n        return p !== \".\" && p !== \"..\";\n      }\n\n      function toAbsolute(root: string) {\n        return (p: string) => {\n          return PATH.join2(root, p);\n        };\n      }\n\n      let check = FS.readdir(mount.mountpoint)\n        .filter(isRealDir)\n        .map(toAbsolute(mount.mountpoint));\n\n      while (check.length) {\n        let path = check.pop();\n        let stat = FS.stat(path);\n\n        if (FS.isDir(stat.mode)) {\n          check.push.apply(\n            check,\n            FS.readdir(path).filter(isRealDir).map(toAbsolute(path)),\n          );\n        }\n\n        entries[path] = { timestamp: stat.mtime, mode: stat.mode };\n      }\n\n      return { type: \"local\", entries: entries };\n    },\n    // Returns file set of the real, on-disk filesystem at the mountpoint.\n    getRemoteSet: async (mount: any) => {\n      // TODO: this should be a map.\n      const entries = Object.create(null);\n\n      const handles = await getFsHandles(mount.opts.fileSystemHandle);\n      for (const [path, handle] of handles) {\n        if (path === \".\") continue;\n\n        entries[PATH.join2(mount.mountpoint, path)] = {\n          timestamp:\n            handle.kind === \"file\"\n              ? new Date((await handle.getFile()).lastModified)\n              : new Date(),\n          mode:\n            handle.kind === \"file\"\n              ? nativeFSAsync.FILE_MODE\n              : nativeFSAsync.DIR_MODE,\n        };\n      }\n\n      return { type: \"remote\", entries, handles };\n    },\n    loadLocalEntry: (path: string) => {\n      const lookup = FS.lookupPath(path);\n      const node = lookup.node;\n      const stat = FS.stat(path);\n\n      if (FS.isDir(stat.mode)) {\n        return { timestamp: stat.mtime, mode: stat.mode };\n      } else if (FS.isFile(stat.mode)) {\n        node.contents = MEMFS.getFileDataAsTypedArray(node);\n        return {\n          timestamp: stat.mtime,\n          mode: stat.mode,\n          contents: node.contents,\n        };\n      } else {\n        throw new Error(\"node type not supported\");\n      }\n    },\n    storeLocalEntry: (path: string, entry: any) => {\n      if (FS.isDir(entry[\"mode\"])) {\n        FS.mkdirTree(path, entry[\"mode\"]);\n      } else if (FS.isFile(entry[\"mode\"])) {\n        FS.writeFile(path, entry[\"contents\"], { canOwn: true });\n      } else {\n        throw new Error(\"node type not supported\");\n      }\n\n      FS.chmod(path, entry[\"mode\"]);\n      FS.utime(path, entry[\"timestamp\"], entry[\"timestamp\"]);\n    },\n    removeLocalEntry: (path: string) => {\n      var stat = FS.stat(path);\n\n      if (FS.isDir(stat.mode)) {\n        FS.rmdir(path);\n      } else if (FS.isFile(stat.mode)) {\n        FS.unlink(path);\n      }\n    },\n    loadRemoteEntry: async (handle: any) => {\n      if (handle.kind === \"file\") {\n        const file = await handle.getFile();\n        return {\n          contents: new Uint8Array(await file.arrayBuffer()),\n          mode: nativeFSAsync.FILE_MODE,\n          timestamp: new Date(file.lastModified),\n        };\n      } else if (handle.kind === \"directory\") {\n        return {\n          mode: nativeFSAsync.DIR_MODE,\n          timestamp: new Date(),\n        };\n      } else {\n        throw new Error(\"unknown kind: \" + handle.kind);\n      }\n    },\n    storeRemoteEntry: async (handles: any, path: string, entry: any) => {\n      const parentDirHandle = handles.get(PATH.dirname(path));\n      const handle = FS.isFile(entry.mode)\n        ? await parentDirHandle.getFileHandle(PATH.basename(path), {\n            create: true,\n          })\n        : await parentDirHandle.getDirectoryHandle(PATH.basename(path), {\n            create: true,\n          });\n      if (handle.kind === \"file\") {\n        const writable = await handle.createWritable();\n        await writable.write(entry.contents);\n        await writable.close();\n      }\n      handles.set(path, handle);\n    },\n    removeRemoteEntry: async (handles: any, path: string) => {\n      const parentDirHandle = handles.get(PATH.dirname(path));\n      await parentDirHandle.removeEntry(PATH.basename(path));\n      handles.delete(path);\n    },\n    reconcile: async (mount: any, src: any, dst: any) => {\n      let total = 0;\n\n      const create: Array<string> = [];\n      Object.keys(src.entries).forEach(function (key) {\n        const e = src.entries[key];\n        const e2 = dst.entries[key];\n        if (\n          !e2 ||\n          (FS.isFile(e.mode) &&\n            e[\"timestamp\"].getTime() > e2[\"timestamp\"].getTime())\n        ) {\n          create.push(key);\n          total++;\n        }\n      });\n      // sort paths in ascending order so directory entries are created\n      // before the files inside them\n      create.sort();\n\n      const remove: Array<string> = [];\n      Object.keys(dst.entries).forEach(function (key) {\n        if (!src.entries[key]) {\n          remove.push(key);\n          total++;\n        }\n      });\n      // sort paths in descending order so files are deleted before their\n      // parent directories\n      remove.sort().reverse();\n\n      if (!total) {\n        return;\n      }\n\n      const handles = src.type === \"remote\" ? src.handles : dst.handles;\n\n      for (const path of create) {\n        const relPath = PATH.normalize(\n          path.replace(mount.mountpoint, \"/\"),\n        ).substring(1);\n        if (dst.type === \"local\") {\n          const handle = handles.get(relPath);\n          const entry = await nativeFSAsync.loadRemoteEntry(handle);\n          nativeFSAsync.storeLocalEntry(path, entry);\n        } else {\n          const entry = nativeFSAsync.loadLocalEntry(path);\n          await nativeFSAsync.storeRemoteEntry(handles, relPath, entry);\n        }\n      }\n\n      for (const path of remove) {\n        if (dst.type === \"local\") {\n          nativeFSAsync.removeLocalEntry(path);\n        } else {\n          const relPath = PATH.normalize(\n            path.replace(mount.mountpoint, \"/\"),\n          ).substring(1);\n          await nativeFSAsync.removeRemoteEntry(handles, relPath);\n        }\n      }\n    },\n  };\n\n  module.FS.filesystems.NATIVEFS_ASYNC = nativeFSAsync;\n}\n\nconst getFsHandles = async (dirHandle: any) => {\n  const handles: any = [];\n\n  async function collect(curDirHandle: any) {\n    for await (const entry of curDirHandle.values()) {\n      handles.push(entry);\n      if (entry.kind === \"directory\") {\n        await collect(entry);\n      }\n    }\n  }\n\n  await collect(dirHandle);\n\n  const result = new Map();\n  result.set(\".\", dirHandle);\n  for (const handle of handles) {\n    const relativePath = (await dirHandle.resolve(handle)).join(\"/\");\n    result.set(relativePath, handle);\n  }\n  return result;\n};\n", "// @ts-ignore Can't find sentinel.wasm or it's corresponding type declarations\nimport sentinelWasm from \"./sentinel.wasm\";\n\ndeclare const sentinelWasm: Uint8Array;\n\nconst sentinelInstancePromise: Promise<WebAssembly.Instance | undefined> =\n  (async function () {\n    // Starting with iOS 18.3.1, WebKit on iOS has an issue with the garbage\n    // collector that breaks the call trampoline. See #130418 and\n    // https://bugs.webkit.org/show_bug.cgi?id=293113 for details.\n    let isIOS =\n      globalThis.navigator &&\n      (/iPad|iPhone|iPod/.test(navigator.userAgent) ||\n        // Starting with iPadOS 13, iPads might send a platform string that looks like a desktop Mac.\n        // To differentiate, we check if the platform is 'MacIntel' (common for Macs and newer iPads)\n        // AND if the device has multi-touch capabilities (navigator.maxTouchPoints > 1)\n        (navigator.platform === \"MacIntel\" &&\n          typeof navigator.maxTouchPoints !== \"undefined\" &&\n          navigator.maxTouchPoints > 1));\n    if (isIOS) {\n      return undefined;\n    }\n    return undefined;\n    try {\n      const module = await WebAssembly.compile(sentinelWasm);\n      return await WebAssembly.instantiate(module);\n    } catch (e) {\n      if (e instanceof WebAssembly.CompileError) {\n        return undefined;\n      }\n      throw e;\n    }\n  })();\n\ntype SentinelInstance<T> = {\n  create_sentinel: () => T;\n  is_sentinel: (val: any) => val is T;\n};\n\nexport async function getSentinelImport(): Promise<SentinelInstance<Symbol>> {\n  const sentinelInstance = await sentinelInstancePromise;\n  if (sentinelInstance) {\n    return sentinelInstance.exports as SentinelInstance<Symbol>;\n  }\n  const error_marker = Symbol(\"error marker\");\n  return {\n    create_sentinel: () => error_marker,\n    is_sentinel: (val: any): val is typeof error_marker => val === error_marker,\n  };\n}\n", "/** @private */\n\nimport { ConfigType } from \"./pyodide\";\nimport { initializeNativeFS } from \"./nativefs\";\nimport { loadBinaryFile, getBinaryResponse } from \"./compat\";\nimport { API, PreRunFunc, type Module } from \"./types\";\nimport { getSentinelImport } from \"generated/sentinel\";\n\n/**\n * @private\n * @hidden\n */\nexport interface EmscriptenSettings {\n  readonly noImageDecoding?: boolean;\n  readonly noAudioDecoding?: boolean;\n  readonly noWasmDecoding?: boolean;\n  readonly preRun: readonly PreRunFunc[];\n  readonly print?: (a: string) => void;\n  readonly printErr?: (a: string) => void;\n  readonly onExit?: (code: number) => void;\n  readonly thisProgram?: string;\n  readonly arguments: readonly string[];\n  readonly instantiateWasm?: (\n    imports: { [key: string]: any },\n    successCallback: (\n      instance: WebAssembly.Instance,\n      module: WebAssembly.Module,\n    ) => void,\n  ) => void;\n  readonly API: API;\n  readonly locateFile: (file: string) => string;\n\n  noInitialRun?: boolean;\n  INITIAL_MEMORY?: number;\n  exitCode?: number;\n}\n\n/**\n * Get the base settings to use to load Pyodide.\n *\n * @private\n */\nexport function createSettings(config: ConfigType): EmscriptenSettings {\n  const settings: EmscriptenSettings = {\n    noImageDecoding: true,\n    noAudioDecoding: true,\n    noWasmDecoding: false,\n    preRun: getFileSystemInitializationFuncs(config),\n    print: config.stdout,\n    printErr: config.stderr,\n    onExit(code) {\n      settings.exitCode = code;\n    },\n    thisProgram: config._sysExecutable,\n    arguments: config.args,\n    API: { config } as API,\n    // Emscripten calls locateFile exactly one time with argument\n    // pyodide.asm.wasm to get the URL it should download it from.\n    //\n    // If we set instantiateWasm the return value of locateFile actually is\n    // unused, but Emscripten calls it anyways. We set instantiateWasm except\n    // when compiling with source maps, see comment in getInstantiateWasmFunc().\n    //\n    // It also is called when Emscripten tries to find a dependency of a shared\n    // library but it failed to find it in the file system. But for us that\n    // means dependency resolution has already failed and we want to throw an\n    // error anyways.\n    locateFile: (path: string) => config.indexURL + path,\n    instantiateWasm: getInstantiateWasmFunc(config.indexURL),\n  };\n  return settings;\n}\n\n/**\n * Make the home directory inside the virtual file system,\n * then change the working directory to it.\n *\n * @param Module The Emscripten Module.\n * @param path The path to the home directory.\n * @private\n */\nfunction createHomeDirectory(path: string): PreRunFunc {\n  return function (Module) {\n    const fallbackPath = \"/\";\n    try {\n      Module.FS.mkdirTree(path);\n    } catch (e) {\n      console.error(`Error occurred while making a home directory '${path}':`);\n      console.error(e);\n      console.error(`Using '${fallbackPath}' for a home directory instead`);\n      path = fallbackPath;\n    }\n    Module.FS.chdir(path);\n  };\n}\n\nfunction setEnvironment(env: { [key: string]: string }): PreRunFunc {\n  return function (Module) {\n    Object.assign(Module.ENV, env);\n  };\n}\n\n/**\n * Mount local directories to the virtual file system. Only for Node.js.\n * @param mounts The list of paths to mount.\n */\nfunction callFsInitHook(\n  fsInit: undefined | ((fs: typeof FS, info: { sitePackages: string }) => void),\n): PreRunFunc[] {\n  if (!fsInit) {\n    return [];\n  }\n  return [\n    async (Module) => {\n      Module.addRunDependency(\"fsInitHook\");\n      try {\n        await fsInit(Module.FS, { sitePackages: Module.API.sitePackages });\n      } finally {\n        Module.removeRunDependency(\"fsInitHook\");\n      }\n    },\n  ];\n}\n\nfunction computeVersionTuple(Module: Module): [number, number, number] {\n  const versionInt = Module.HEAPU32[Module._Py_Version >>> 2];\n  const major = (versionInt >>> 24) & 0xff;\n  const minor = (versionInt >>> 16) & 0xff;\n  const micro = (versionInt >>> 8) & 0xff;\n  return [major, minor, micro];\n}\n/**\n * Install the Python standard library to the virtual file system.\n *\n * Previously, this was handled by Emscripten's file packager (pyodide.asm.data).\n * However, using the file packager means that we have only one version\n * of the standard library available. We want to be able to use different\n * versions of the standard library, for example:\n *\n * - Use compiled(.pyc) or uncompiled(.py) standard library.\n * - Remove unused modules or add additional modules using bundlers like pyodide-pack.\n *\n * @param stdlibURL The URL for the Python standard library\n */\nfunction installStdlib(stdlibURL: string): PreRunFunc {\n  const stdlibPromise: Promise<Uint8Array> = loadBinaryFile(stdlibURL);\n  return async (Module: Module) => {\n    Module.API.pyVersionTuple = computeVersionTuple(Module);\n    const [pymajor, pyminor] = Module.API.pyVersionTuple;\n    Module.FS.mkdirTree(\"/lib\");\n    Module.API.sitePackages = `/lib/python${pymajor}.${pyminor}/site-packages`;\n    Module.FS.mkdirTree(Module.API.sitePackages);\n    Module.addRunDependency(\"install-stdlib\");\n\n    try {\n      const stdlib = await stdlibPromise;\n      Module.FS.writeFile(`/lib/python${pymajor}${pyminor}.zip`, stdlib);\n    } catch (e) {\n      console.error(\"Error occurred while installing the standard library:\");\n      console.error(e);\n    } finally {\n      Module.removeRunDependency(\"install-stdlib\");\n    }\n  };\n}\n\n/**\n * Initialize the virtual file system, before loading Python interpreter.\n * @private\n */\nfunction getFileSystemInitializationFuncs(config: ConfigType): PreRunFunc[] {\n  let stdLibURL;\n  if (config.stdLibURL != undefined) {\n    stdLibURL = config.stdLibURL;\n  } else {\n    stdLibURL = config.indexURL + \"python_stdlib.zip\";\n  }\n\n  return [\n    installStdlib(stdLibURL),\n    createHomeDirectory(config.env.HOME),\n    setEnvironment(config.env),\n    initializeNativeFS,\n    ...callFsInitHook(config.fsInit),\n  ];\n}\n\nfunction getInstantiateWasmFunc(\n  indexURL: string,\n): EmscriptenSettings[\"instantiateWasm\"] {\n  // @ts-ignore\n  if (SOURCEMAP || typeof WasmOffsetConverter !== \"undefined\") {\n    // According to the docs:\n    //\n    // \"Sanitizers or source map is currently not supported if overriding\n    // WebAssembly instantiation with Module.instantiateWasm.\"\n    // https://emscripten.org/docs/api_reference/module.html?highlight=instantiatewasm#Module.instantiateWasm\n    //\n    // typeof WasmOffsetConverter !== \"undefined\" checks for asan.\n    return;\n  }\n  const { binary, response } = getBinaryResponse(indexURL + \"pyodide.asm.wasm\");\n  const sentinelImportPromise = getSentinelImport();\n  return function (\n    imports: { [key: string]: { [key: string]: any } },\n    successCallback: (\n      instance: WebAssembly.Instance,\n      module: WebAssembly.Module,\n    ) => void,\n  ) {\n    (async function () {\n      imports.sentinel = await sentinelImportPromise;\n      try {\n        let res: WebAssembly.WebAssemblyInstantiatedSource;\n        if (response) {\n          res = await WebAssembly.instantiateStreaming(response, imports);\n        } else {\n          res = await WebAssembly.instantiate(await binary, imports);\n        }\n        const { instance, module } = res;\n        successCallback(instance, module);\n      } catch (e) {\n        console.warn(\"wasm instantiation failed!\");\n        console.warn(e);\n      }\n    })();\n\n    return {}; // Compiling asynchronously, no exports.\n  };\n}\n", "/**\n *\n * The Pyodide version.\n *\n * The version here is a Python version, following :pep:`440`. This is different\n * from the version in ``package.json`` which follows the node package manager\n * version convention.\n */\nexport const version: string = \"0.28.0\";\n", "/**\n * The main bootstrap code for loading pyodide.\n */\nimport {\n  calculateDirname,\n  loadScript,\n  initNodeModules,\n  resolvePath,\n  loadLockFile,\n} from \"./compat\";\n\nimport { createSettings } from \"./emscripten-settings\";\nimport { version } from \"./version\";\n\nimport type { PyodideInterface } from \"./api.js\";\nimport type { TypedArray, Module, PackageData, FSType } from \"./types\";\nimport type { EmscriptenSettings } from \"./emscripten-settings\";\nimport type { SnapshotConfig } from \"./snapshot\";\nexport type { PyodideInterface, TypedArray };\n\nexport { version, type PackageData };\n\ndeclare function _createPyodideModule(\n  settings: EmscriptenSettings,\n): Promise<Module>;\n\n// BUILD_ID is generated from hashing together pyodide.asm.js and\n// pyodide.asm.wasm in esbuild.config.outer.mjs\n//\n// It is used to check that memory snapshots were generated by the same build of\n// the runtime that is trying to use them. Attempting to use a snapshot from a\n// different build will fail badly. See logic in snapshot.ts.\ndeclare const BUILD_ID: string;\n\n/**\n * See documentation for loadPyodide.\n * @hidden\n */\nexport type ConfigType = {\n  indexURL: string;\n  packageCacheDir: string;\n  lockFileURL: string;\n  fullStdLib?: boolean;\n  stdLibURL?: string;\n  stdin?: () => string;\n  stdout?: (msg: string) => void;\n  stderr?: (msg: string) => void;\n  jsglobals?: object;\n  _sysExecutable?: string;\n  args: string[];\n  fsInit?: (FS: FSType, info: { sitePackages: string }) => Promise<void>;\n  env: { [key: string]: string };\n  packages: string[];\n  _makeSnapshot: boolean;\n  enableRunUntilComplete: boolean;\n  checkAPIVersion: boolean;\n  BUILD_ID: string;\n};\n\n/**\n * Load the main Pyodide wasm module and initialize it.\n *\n * @returns The :ref:`js-api-pyodide` module.\n * @example\n * async function main() {\n *   const pyodide = await loadPyodide({\n *     fullStdLib: true,\n *     stdout: (msg) => console.log(`Pyodide: ${msg}`),\n *   });\n *   console.log(\"Loaded Pyodide\");\n * }\n * main();\n */\nexport async function loadPyodide(\n  options: {\n    /**\n     * The URL from which Pyodide will load the main Pyodide runtime and\n     * packages. It is recommended that you leave this unchanged, providing an\n     * incorrect value can cause broken behavior.\n     *\n     * Default: The url that Pyodide is loaded from with the file name\n     * (``pyodide.js`` or ``pyodide.mjs``) removed.\n     */\n    indexURL?: string;\n\n    /**\n     * The file path where packages will be cached in node. If a package\n     * exists in ``packageCacheDir`` it is loaded from there, otherwise it is\n     * downloaded from the JsDelivr CDN and then cached into ``packageCacheDir``.\n     * Only applies when running in node; ignored in browsers.\n     *\n     * Default: same as indexURL\n     */\n    packageCacheDir?: string;\n\n    /**\n     * The URL from which Pyodide will load the Pyodide ``pyodide-lock.json`` lock\n     * file. You can produce custom lock files with :py:func:`micropip.freeze`.\n     * Default: ```${indexURL}/pyodide-lock.json```\n     */\n    lockFileURL?: string;\n    /**\n     * Load the full Python standard library. Setting this to false excludes\n     * unvendored modules from the standard library.\n     * Default: ``false``\n     */\n    fullStdLib?: boolean;\n    /**\n     * The URL from which to load the standard library ``python_stdlib.zip``\n     * file. This URL includes the most of the Python standard library. Some\n     * stdlib modules were unvendored, and can be loaded separately\n     * with ``fullStdLib: true`` option or by their package name.\n     * Default: ```${indexURL}/python_stdlib.zip```\n     */\n    stdLibURL?: string;\n    /**\n     * Override the standard input callback. Should ask the user for one line of\n     * input. The :js:func:`pyodide.setStdin` function is more flexible and\n     * should be preferred.\n     */\n    stdin?: () => string;\n    /**\n     * Override the standard output callback. The :js:func:`pyodide.setStdout`\n     * function is more flexible and should be preferred in most cases, but\n     * depending on the ``args`` passed to ``loadPyodide``, Pyodide may write to\n     * stdout on startup, which can only be controlled by passing a custom\n     * ``stdout`` function.\n     */\n    stdout?: (msg: string) => void;\n    /**\n     * Override the standard error output callback. The\n     * :js:func:`pyodide.setStderr` function is more flexible and should be\n     * preferred in most cases, but depending on the ``args`` passed to\n     * ``loadPyodide``, Pyodide may write to stdout on startup, which can only\n     * be controlled by passing a custom ``stdout`` function.\n     */\n    stderr?: (msg: string) => void;\n    /**\n     * The object that Pyodide will use for the ``js`` module.\n     * Default: ``globalThis``\n     */\n    jsglobals?: object;\n    /**\n     * Determine the value of ``sys.executable``.\n     * @ignore\n     */\n    _sysExecutable?: string;\n    /**\n     * Command line arguments to pass to Python on startup. See `Python command\n     * line interface options\n     * <https://docs.python.org/3.10/using/cmdline.html#interface-options>`_ for\n     * more details. Default: ``[]``\n     */\n    args?: string[];\n    /**\n     * Environment variables to pass to Python. This can be accessed inside of\n     * Python at runtime via :py:data:`os.environ`. Certain environment variables change\n     * the way that Python loads:\n     * https://docs.python.org/3.10/using/cmdline.html#environment-variables\n     * Default: ``{}``.\n     * If ``env.HOME`` is undefined, it will be set to a default value of\n     * ``\"/home/pyodide\"``\n     */\n    env?: { [key: string]: string };\n    /**\n     * A list of packages to load as Pyodide is initializing.\n     *\n     * This is the same as loading the packages with\n     * :js:func:`pyodide.loadPackage` after Pyodide is loaded except using the\n     * ``packages`` option is more efficient because the packages are downloaded\n     * while Pyodide bootstraps itself.\n     */\n    packages?: string[];\n    /**\n     * Opt into the old behavior where :js:func:`PyProxy.toString() <pyodide.ffi.PyProxy.toString>`\n     * calls :py:func:`repr` and not :py:class:`str() <str>`. Deprecated.\n     * @deprecated\n     */\n    pyproxyToStringRepr?: boolean;\n    /**\n     * Make loop.run_until_complete() function correctly using stack switching.\n     * Default: ``true``.\n     */\n    enableRunUntilComplete?: boolean;\n    /**\n     * If true (default), throw an error if the version of Pyodide core does not\n     * match the version of the Pyodide js package.\n     */\n    checkAPIVersion?: boolean;\n    /**\n     * This is a hook that allows modification of the file system before the\n     * main() function is called and the intereter is started. When this is\n     * called, it is guaranteed that there is an empty site-packages directory.\n     * @experimental\n     */\n    fsInit?: (FS: FSType, info: { sitePackages: string }) => Promise<void>;\n    /**\n     * Opt into the old behavior where JavaScript `null` is converted to `None`\n     * instead of `jsnull`. Deprecated.\n     * @deprecated\n     */\n    convertNullToNone?: boolean;\n    /** @ignore */\n    _makeSnapshot?: boolean;\n    /** @ignore */\n    _loadSnapshot?:\n      | Uint8Array\n      | ArrayBuffer\n      | PromiseLike<Uint8Array | ArrayBuffer>;\n    /** @ignore */\n    _snapshotDeserializer?: (obj: any) => any;\n  } = {},\n): Promise<PyodideInterface> {\n  await initNodeModules();\n  let indexURL = options.indexURL || (await calculateDirname());\n  indexURL = resolvePath(indexURL); // A relative indexURL causes havoc.\n  if (!indexURL.endsWith(\"/\")) {\n    indexURL += \"/\";\n  }\n  options.indexURL = indexURL;\n\n  const default_config = {\n    fullStdLib: false,\n    jsglobals: globalThis,\n    stdin: globalThis.prompt ? globalThis.prompt : undefined,\n    lockFileURL: indexURL + \"pyodide-lock.json\",\n    args: [],\n    env: {},\n    packages: [],\n    enableRunUntilComplete: true,\n    checkAPIVersion: true,\n    BUILD_ID,\n  };\n  const config = Object.assign(default_config, options) as ConfigType;\n  config.env.HOME ??= \"/home/pyodide\";\n  /**\n   * `PyErr_Print()` will call `exit()` if the exception is a `SystemError`.\n   * This shuts down the Python interpreter, which is a change in behavior from\n   * what happened before. In order to avoid this, we set the `inspect` config\n   * parameter which prevents `PyErr_Print()` from calling `exit()`. Except in\n   * the cli runner, we actually do want to exit. So set default to true and in\n   * cli runner we explicitly set it to false.\n   */\n  config.env.PYTHONINSPECT ??= \"1\";\n  const emscriptenSettings = createSettings(config);\n  const API = emscriptenSettings.API;\n  API.lockFilePromise = loadLockFile(config.lockFileURL);\n\n  // If the pyodide.asm.js script has been imported, we can skip the dynamic import\n  // Users can then do a static import of the script in environments where\n  // dynamic importing is not allowed or not desirable, like module-type service workers\n  if (typeof _createPyodideModule !== \"function\") {\n    const scriptSrc = `${config.indexURL}pyodide.asm.js`;\n    await loadScript(scriptSrc);\n  }\n\n  let snapshot: Uint8Array | undefined = undefined;\n  if (options._loadSnapshot) {\n    const snp = await options._loadSnapshot;\n    if (ArrayBuffer.isView(snp)) {\n      snapshot = snp;\n    } else {\n      snapshot = new Uint8Array(snp);\n    }\n    emscriptenSettings.noInitialRun = true;\n    // @ts-ignore\n    emscriptenSettings.INITIAL_MEMORY = snapshot.length;\n  }\n\n  // _createPyodideModule is specified in the Makefile by the linker flag:\n  // `-s EXPORT_NAME=\"'_createPyodideModule'\"`\n  const Module = await _createPyodideModule(emscriptenSettings);\n  // Handle early exit\n  if (emscriptenSettings.exitCode !== undefined) {\n    throw new Module.ExitStatus(emscriptenSettings.exitCode);\n  }\n  if (options.pyproxyToStringRepr) {\n    API.setPyProxyToStringMethod(true);\n  }\n  if (options.convertNullToNone) {\n    API.setCompatNullToNone(true);\n  }\n\n  if (API.version !== version && config.checkAPIVersion) {\n    throw new Error(`\\\nPyodide version does not match: '${version}' <==> '${API.version}'. \\\nIf you updated the Pyodide version, make sure you also updated the 'indexURL' parameter passed to loadPyodide.\\\n`);\n  }\n  // Disable further loading of Emscripten file_packager stuff.\n  Module.locateFile = (path: string) => {\n    if (path.endsWith(\".so\")) {\n      throw new Error(`Failed to find dynamic library \"${path}\"`);\n    }\n    throw new Error(`Unexpected call to locateFile(\"${path}\")`);\n  };\n\n  let snapshotConfig: SnapshotConfig | undefined = undefined;\n  if (snapshot) {\n    snapshotConfig = API.restoreSnapshot(snapshot);\n  }\n  // runPython works starting after the call to finalizeBootstrap.\n  const pyodide = API.finalizeBootstrap(\n    snapshotConfig,\n    options._snapshotDeserializer,\n  );\n  API.sys.path.insert(0, \"\");\n\n  if (!pyodide.version.includes(\"dev\")) {\n    // Currently only used in Node to download packages the first time they are\n    // loaded. But in other cases it's harmless.\n    API.setCdnUrl(`https://cdn.jsdelivr.net/pyodide/v${pyodide.version}/full/`);\n  }\n  API._pyodide.set_excepthook();\n  await API.packageIndexReady;\n  // I think we want this initializeStreams call to happen after\n  // packageIndexReady? I don't remember why.\n  API.initializeStreams(config.stdin, config.stdout, config.stderr);\n  return pyodide;\n}\n"],
  "mappings": "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",
  "names": ["_isNumber", "n", "__name", "_capitalize", "str", "_getter", "p", "booleanProps", "numericProps", "stringProps", "arrayProps", "objectProps", "props", "StackFrame", "obj", "i", "v", "fileName", "lineNumber", "columnNumber", "functionName", "argsStartIndex", "argsEndIndex", "args", "locationString", "parts", "j", "k", "stackframe_default", "ErrorStackParser", "CHROME_IE_STACK_REGEXP", "SAFARI_NATIVE_CODE_REGEXP", "error", "urlLike", "regExp", "filtered", "line", "sanitizedLine", "location", "locationParts", "functionNameRegex", "matches", "errorStackParser", "error_stack_parser_default", "IN_NODE", "IN_NODE_COMMONJS", "__require", "IN_NODE_ESM", "IN_BUN", "IN_DENO", "IN_BROWSER", "IN_BROWSER_MAIN_THREAD", "IN_BROWSER_WEB_WORKER", "IN_SAFARI", "IN_SHELL", "nodeUrlMod", "nodePath", "nodeVmMod", "nodeFSMod", "nodeFsPromisesMod", "initNodeModules", "pathSep", "fs", "crypto", "ws", "child_process", "node_modules", "mod", "node_resolvePath", "path", "base", "browser_resolvePath", "resolvePath", "x", "node_getBinaryResponse", "_file_sub_resource_hash", "data", "shell_getBinaryResponse", "browser_getBinaryResponse", "subResourceHash", "url", "getBinaryResponse", "loadBinaryFile", "file_sub_resource_hash", "response", "binary", "r", "loadScript", "e", "nodeLoadScript", "loadLockFile", "lockFileURL", "package_string", "calculateDirname", "err", "indexOfLastSlash", "initializeNativeFS", "module", "FS", "MEMFS", "PATH", "nativeFSAsync", "mount", "populate", "callback", "local", "remote", "src", "dst", "entries", "isRealDir", "toAbsolute", "root", "check", "stat", "handles", "getFsHandles", "handle", "node", "entry", "file", "parentDirHandle", "writable", "total", "create", "key", "e2", "remove", "relPath", "dirHandle", "collect", "curDirHandle", "result", "relativePath", "sentinelInstancePromise", "sentinel_default", "getSentinelImport", "sentinelInstance", "error_marker", "val", "createSettings", "config", "settings", "getFileSystemInitializationFuncs", "code", "getInstantiateWasmFunc", "createHomeDirectory", "Module", "fallbackPath", "setEnvironment", "env", "callFsInitHook", "fsInit", "computeVersionTuple", "versionInt", "major", "minor", "micro", "installStdlib", "stdlibURL", "stdlibPromise", "pymajor", "pyminor", "stdlib", "stdLibURL", "indexURL", "sentinelImportPromise", "imports", "successCallback", "res", "instance", "version", "loadPyodide", "options", "default_config", "emscriptenSettings", "API", "scriptSrc", "snapshot", "snp", "snapshotConfig", "pyodide"]
}
